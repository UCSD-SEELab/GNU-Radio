--------------------------------------------------------------------------------
             _____ _____ _____ _     _____ _____ _____ _____ _____              
            |  ___|  _  \  _  \ |   |  _  |  _  \  ___|  _  \  ___|             
            | |  _| |_| / |_| | |   | |_| | | | | |___| |_| / |___              
            | | | |  _  \  _  | |   |  _  | | | |  ___|  _  \  ___|             
            | |_| | | | | |_| | |___| | | | |_| | |___| | | | |                 
            |_____|_| |_|_____/_____|_| |_|_____/_____|_| |_|_|                 
--------------------------------------------------------------------------------
Contains utilities and tools usable with BladeRF that interface with GNURadio.
These have been tested on both Linux (Raspberry Pi) and Windows platforms

Main structure:

             .-------------top_level_bladeRF-----------.
            /     /           |             \           \
rx_processor   scanner   blade_rx   gnuradio_interface  .--------------------.
                                             |          | Additional Sensors |
                      .--------------------------.      |                    |
                      | GNURadio Generated Files |      | hardware           |
                      |                          |      |____________________|
                      | ofdm_transmitter         |         
                      | ofdm_receiver            |
                      |__________________________|

- top_level_bladeRF loads the FPGA onto the BladeRF using blade_rx. It then 
  starts and maintains all the other threads:
  - gnuradio_interface
  - rx_processor
  - scanner
  - hardware
  It allows for smooth handling of exits (including Ctrl+C).

- gnuradio_interface calls rx or tx GNURadio schemes depending on configuration
  to either receive or transmit data using whatever modulation scheme has been
  implemented. The idea behind this file is to make it modular, being capable of 
  calling any gnuradio generated files that write to the appropriate file and 
  implement the main call.

- rx_processor processes the data received, capable of accessing the bitstream 
  containing communication data, GPS, and anything else being collected. This 
  can be set to work on old or new data.

- scanner has peak detection and RSSI measuring capability.

- hardware interfaces with the air quality sensor, modified slightly from 
  Michael / Christine's code to work with top level's callbacks

Separate utilities:
- bladeRF_fft only performs an FFT on the signal outputted by the BladeRF for
  use in determing RSSI or peaks. It is basically a simpler version of 
  tx/rx_2400_r2

- visualize is used for visualizing rssi and gps data using matplotlib
  (this file needs improvement, currently only does linear contours)
--------------------------------------------------------------------------------
Setting up Dependencies:

Windows:
  - GNURadio binary installer
  - Nuand BladeRF installer    Does not work on newest windows 10, 
                               need to install from source
  python -m pip install pymavlink
  python -m pip install numpy
  python -m pip install pyserial

  Setting up System Environment Variables:
  Add to PATH:
    C:\Program Files\GNURadio-3.7\bin
    C:\Program Files\GNURadio-3.7\lib\site-packages

  Add to PYTHONPATH:
    C:\Program Files\GNURadio-3.7\lib\site-packages

Linux:
  sudo apt-get install bladerf
  sudo apt-get install gnuradio
  sudo apt-get install gr-osmosdr
  sudo apt-get install numpy
  sudo apt-get install pymavlink

  Running Kazim's OFDM schemes requires at least GNURadio 3.7.10, which is only
  currently included in Raspbian Jessie's "Stretch" builds. To set this up:

  Update /etc/apt/sources.list and change instances of jessie to stretch
  sudo apt-get update
  sudo apt-get upgrade
  sudo apt-get install bladerf
  sudo apt-get install gnuradio
  sudo apt-get install gr-osmosdr

  If you do not want to keep your pi in this mode, change /etc/apt/sources.list
  back to its original state.

--------------------------------------------------------------------------------
Running program:

First, config the files accordingly (io file locations, which sensors being read)

This script is usable for both tx and rx, with plans to do both simultaneously in the future. However, GNURadio was not happy with doing full duplex communications, and it results in buffer errors and crashes.

The important config variables:
top_level_bladeRF:
- center_freq sets frequency of tx/rx ----- VERY IMPORTANT (should parameterize)
- run_time automatically terminates program after a certain period of time. Does 
  not control rx/tx times though.
- rx_process turns the rx_processor on / off in manual mode
- air_sensor turns air sensor readings on / off
- gps_tagging turns gps readings on / off
- pre_headers and post_headers are added to each message when transmitting

gnuradio_interface:
- tx whether to transmit ----- VERY IMPORTANT
- rx whether to receive  ----- VERY IMPORTANT
Note: always set either tx or rx to true, not both.

- tx_time controls tx time
- rx_time controls rx time

rx_processor:
- print_verbose controls how much is printed (good for debugging packet validation)

When ready:
- Connect appropriate antennas to connectors on bladeRF
- Connect bladeRF to USB port
- Connect any other sensors and set their configs up accordingly

May need to initialize certain files like out_file or in_file before starting 
program. This should be integrated into the program in future.

Run: (assuming python is in PATH. You can also run in IDLE or whatever you use)
python top_level_bladeRF.py [tx | rx | rxnp | p | m]
  tx   - transmits new samples
  rx   - receives new samples (and processes data live)
  rxnp - receive, but do not process samples
  p    - processes pre-received samples from in_file
  m    - manually specify options in top_level_bladerf

To visualize received data after a flight, run:
python visualize.py
--------------------------------------------------------------------------------